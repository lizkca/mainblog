<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Read the Docs Blog - Posts tagged commonmark</title>
  <id>https://blog.readthedocs.com/archive/tag/commonmark/atom.xml</id>
  <updated>2015-10-16T00:00:00Z</updated>
  <link href="https://blog.readthedocs.com" />
  <link href="https://blog.readthedocs.com/archive/tag/commonmark/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.9.5">ABlog</generator>
  <entry xml:base="https://blog.readthedocs.com/archive/tag/commonmark/atom.xml">
    <title type="text">Read the Docs &amp; Sphinx now support Commonmark</title>
    <id>https://blog.readthedocs.com/adding-markdown-support/</id>
    <updated>2015-10-16T00:00:00Z</updated>
    <published>2015-10-16T00:00:00Z</published>
    <link href="https://blog.readthedocs.com/adding-markdown-support/" />
    <author>
      <name>Eric Holscher</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;read-the-docs-sphinx-now-support-commonmark&quot;&gt;

&lt;p&gt;Read the Docs is built on top of Sphinx,
which has always relied on reStructuredText as an input mechanism.
We have long heard from folks that they want to write documentation in Markdown,
as well as RST.&lt;/p&gt;
&lt;p&gt;Today we are announcing that this is now possible!
With the standardization of Markdown into &lt;a class=&quot;reference external&quot; href=&quot;https://commonmark.org/&quot;&gt;Commonmark&lt;/a&gt;,
we have the ability to support a markup language with a proper spec.
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/rtfd/recommonmark&quot;&gt;recommonmark&lt;/a&gt; is the bridge that allows Commonmark to be used inside Sphinx.
&lt;strong&gt;This allows you to use both RST and Commonmark inside of your Sphinx project.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;get-started&quot;&gt;
&lt;h2&gt;Get started&lt;/h2&gt;
&lt;p&gt;We have documented how to &lt;a class=&quot;reference external&quot; href=&quot;https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html#using-markdown-with-sphinx&quot; title=&quot;(in Read the Docs v5.25.0)&quot;&gt;&lt;span class=&quot;xref std std-ref&quot;&gt;get started&lt;/span&gt;&lt;/a&gt; with Commonmark inside of Sphinx.
You simply:&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recommonmark&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then in your &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;conf.py&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight-python notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;recommonmark.parser&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommonMarkParser&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source_parsers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommonMarkParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source_suffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.rst&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This allows you to write both &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;.md&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;.rst&lt;/span&gt;&lt;/code&gt; files inside of the same project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;example-project&quot;&gt;
&lt;h2&gt;Example Project&lt;/h2&gt;
&lt;p&gt;You can see this in action in my &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ericholscher/sphinx-markdown-test&quot;&gt;sphinx-markdown-test repo&lt;/a&gt; on GitHub.
You can also see a &lt;a class=&quot;reference external&quot; href=&quot;https://sphinx-markdown-test.readthedocs.org/en/latest/&quot;&gt;rendered version&lt;/a&gt; hosted on Read the Docs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;how-it-works&quot;&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;The way this project works is that it allows Commonmark files to be parsed into &lt;a class=&quot;reference external&quot; href=&quot;http://docutils.sourceforge.net/docs/ref/doctree.html&quot;&gt;docutils nodes&lt;/a&gt;.
That means that everything downstream of the parser works the same as if the content came from RST.
This allows the content to slot into Sphinx and other RST based tools without much effort.&lt;/p&gt;
&lt;p&gt;There are some caveats where certain Sphinx &amp;amp; docutils directives depend on the internal structure of RST.
We would like to eventually build a bridge from Commonmark to the Sphinx directives,
which would give a lot of the power of Sphinx to the Commonmark content.&lt;/p&gt;
&lt;p&gt;We are looking at ways to handle this in the future,
and hope to eventually bring the full power of RST and Sphinx into the Commonmark ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;limitations&quot;&gt;
&lt;h2&gt;Limitations&lt;/h2&gt;
&lt;p&gt;It should be noted that Commonmark doesn’t support a lot of the concepts that RST lets you represent.
In particular,
there is no standardized way in Commonmark to represent inline or block levels constructs.
So things like the &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;toctree&lt;/span&gt;&lt;/code&gt; directive and &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:ref:&lt;/span&gt;&lt;/code&gt; markup don’t have an analog.&lt;/p&gt;
&lt;p&gt;There is a &lt;a class=&quot;reference external&quot; href=&quot;http://talk.commonmark.org/t/generic-directives-plugins-syntax/444&quot;&gt;proposed draft&lt;/a&gt; to the Commonmark spec to allow a similar syntax.
We are investigating adding support to this in recommonmark,
but we don’t want to implement a standard prematurely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;intended-usage&quot;&gt;
&lt;h2&gt;Intended Usage&lt;/h2&gt;
&lt;p&gt;We think that Sphinx’s power to reference code and other programming concepts is quite powerful.
However,
all content doesn’t need this ability.
When you’re writing content that just needs to have basic text formatting and links,
Commonmark is a great option for this.&lt;/p&gt;
&lt;p&gt;We imagine that API reference documentation will continue to be authored in RST for quite some time.
Also index pages and other reference heavy content will continue to be RST.
FAQ’s, blog posts, and other less reference heavy content is a great candidate for writing in Commonmark.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;feedback&quot;&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;This is a new release,
so there are likely some missing pieces to our integration.
Go ahead and try it out.
Please file features ideas and bug reports on the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/rtfd/recommonmark/issues&quot;&gt;recommonmark bug tracker&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
